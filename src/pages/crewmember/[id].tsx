import type { GetStaticPropsContext, GetStaticProps, NextPage } from "next";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

import { useRouter } from "next/router";
import { api } from "~/utils/api";
import Head from "next/head";
import { NewItemPageHeader } from "~/components/NewItemPageHeader";

const singleCrewMemberPage: NextPage<{ id: string }> = ({ id }) => {
  // const router = useRouter();

  const { data, isLoading } = api.crewMembers.getById.useQuery({
    crewMemberId: id,
  });

  if (isLoading) return <div>Loading...</div>;

  if (!data) return <div>Something went wrong</div>;
  if (!data.id) return <div>Something went wrong</div>;
  if (!data.name) return <div>Something went wrong</div>;

  return (
    <>
      <Head>
        <title>{`${data.name} (${data.position}) - War Manager`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-zinc-800">
        <NewItemPageHeader title={`${data.name} (${data.position})`} />
        <div className="flex flex-col items-center justify-center gap-4 p-2">
          <div className="w-full p-2 sm:w-4/5 ">
            <h1 className="text-lg font-semibold">Name</h1>
            <input
              className="w-full rounded p-2 text-stone-800 outline-none"
              type="text"
              value={data.name}
              disabled={true}
            />
          </div>
          <div className="w-full p-2 sm:w-4/5">
            <h1 className="text-lg font-semibold">Position</h1>
            <input
              className="w-full rounded p-2 text-stone-800 outline-none"
              type="text"
              value={data.position}
              disabled={true}
            />
          </div>
          <div className="w-full p-2 sm:w-4/5">
            <h1 className="text-lg font-semibold">Notes</h1>
            <textarea
              className="w-full rounded p-2 text-stone-800 outline-none"
              disabled={true}
            >
              {data.description || "nothing to show..."}
            </textarea>
          </div>
        </div>
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const helper = generateSSGHelper();

  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("slug is not a string");
  if (id.length <= 0) throw new Error("slug too short");

  await helper.crewMembers.getById.prefetch({ crewMemberId: id });

  const result = helper.dehydrate();

  return {
    props: {
      trpcState: result,
      id: id,
    },
    revalidate: 60,
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default singleCrewMemberPage;
