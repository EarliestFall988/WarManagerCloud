import type { GetStaticPropsContext, GetStaticProps, NextPage } from "next";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

// import { useRouter } from "next/router";
import { api } from "~/utils/api";
import Head from "next/head";
import { NewItemPageHeader } from "~/components/NewItemPageHeader";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useMemo, useState } from "react";
import { toast } from "react-hot-toast";
import { CloudArrowUpIcon } from "@heroicons/react/24/solid";
import { useRouter } from "next/router";
import { type Tag } from "@prisma/client";
import { TagsMultiselectDropdown } from "~/components/TagDropdown";

const SingleCrewMemberPage: NextPage<{ id: string }> = ({ id }) => {

  const [crewName, setCrewName] = useState("");
  const [position, setPosition] = useState("");
  const [description, setDescription] = useState("");

  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [travel, setTravel] = useState("No");
  const [wage, setWage] = useState("0");
  const [burden, setBurden] = useState("0");
  const [rating, setRating] = useState("5");

  const [tags, setTags] = useState([] as Tag[]);
  const router = useRouter();

  const crewContext = api.useContext().crewMembers;
  const tagsContext = api.useContext().tags;

  const mutation = api.crewMembers.update.useMutation({
    onSuccess: (data) => {
      toast.success(`${data.name} (${data.position}) updated successfully!`);
      void crewContext.invalidate();
      void tagsContext.invalidate();
      void router.back();
    },
    onError: (e) => {
      const errorMessage = e.shape?.data?.zodError?.fieldErrors;

      if (!errorMessage) {
        toast.error("Something went wrong! Please try again later");
      } else if (errorMessage?.content && errorMessage?.content[0]) {
        toast.error(errorMessage.content[0]);
      }
    },
  });



  const { data, isLoading } = api.crewMembers.getById.useQuery({
    crewMemberId: id,
  });

  useMemo(() => {
    if (data == null) return;

    if (data.name) {
      setCrewName(data.name);
    }
    if (data.position) {
      setPosition(data.position);
    }
    if (data.description) {
      setDescription(data.description);
    }

    if (data.phone) {
      setPhone(data.phone);
    }
    if (data.email) {
      setEmail(data.email);
    }

    if (data.travel) {
      setTravel(data.travel);
    }

    if (data.wage) {
      setWage(data.wage.toString());
    }

    if (data.burden) {
      setBurden(data.burden.toString());
    }

    if (data.rating) {
      setRating(data.rating);
    }

    if (data.tags) {
      setTags(data.tags)
    }

  }, [data]);

  if (isLoading)
    return (
      <div>
        <LoadingPage />
      </div>
    );

  if (!data) return <div>Something went wrong</div>;
  if (!data.id) return <div>Something went wrong</div>;
  if (!data.name) return <div>Something went wrong</div>;

  // setCrewName(data.name)
  // setPosition(data.position)
  // setDescription(data.description)

  const getTagsStringArray = () => {
    const tagsStringArray = [] as string[];
    tags.forEach((tag) => {
      tagsStringArray.push(tag.id);
    });
    return tagsStringArray;
  }

  const save = () => {
    mutation.mutate({
      crewMemberId: data.id,
      name: crewName,
      position,
      notes: description,
      tags: getTagsStringArray(),
    });
    toast.loading("Saving changes...", { duration: 1000 });
  }

  return (
    <>
      <Head>
        <title>{`${data.name} (${data.position}) - War Manager`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-zinc-900">
        <NewItemPageHeader title={`${data.name} `} save={save} saving={mutation.isLoading} cancel={() => void router.back()} />
        <div className="flex items-center justify-center">
          <div className="flex w-full flex-col items-center justify-center gap-4 sm:w-3/5">
            <div className="w-full p-2">
              <h1 className="text-lg font-semibold">Name</h1>
              <input
                className="w-full rounded p-2 text-stone-800 outline-none"
                type="text"
                value={crewName}
                onChange={(e) => setCrewName(e.target.value)}
                disabled={isLoading || mutation.isLoading}
              />
            </div>
            <div className="w-full p-2">
              <h1 className="text-lg font-semibold">Position</h1>
              <select
                className="w-full rounded p-2 text-stone-800 outline-none"
                placeholder="Name"
                value={position}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setPosition(e.target.value)}
              >
                <option value="Crew">Laborer</option>
                <option value="Specialist">Specialist</option>
                <option value="Foreman">Foreman</option>
                <option value="Specialist Foreman">Specialist Foreman</option>
                <option value="Superintendent">Superintendent</option>
                <option value="Project Manager">Project Manager</option>
                <option value="Machine Operator">Machine Operator</option>
                <option value="Subcontractor">Subcontractor</option>
                <option value="Other">Other</option>
              </select>
            </div>

            <div className="w-full p-2">
              <p className="py-1 text-lg">Tags</p>
              <TagsMultiselectDropdown type={"crews"} savedTags={tags} onSetTags={setTags} />
            </ div>

            <div className="w-full p-2">
              <p className="py-1 text-lg">Phone Number</p>
              <input
                type="tel"
                className="peer w-full rounded p-2 text-stone-800 outline-none invalid:[&:not(:placeholder-shown):not(:focus)]:ring invalid:[&:not(:placeholder-shown):not(:focus)]:ring-red-500"
                placeholder="000-000-0000"
                value={phone}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setPhone(e.target.value)}
                pattern={"[0-9]{3}-[0-9]{3}-[0-9]{4}"}
              />
              <p className="mt-2 hidden text-sm text-red-500 peer-[&:not(:placeholder-shown):not(:focus):invalid]:block">
                Please enter a valid phone number (000-000-0000)
              </p>
            </div>
            <div className="w-full p-2">
              <p className="py-1 text-lg">Email</p>
              <input
                type="email"
                className="peer w-full rounded p-2 text-stone-800 outline-none invalid:[&:not(:placeholder-shown):not(:focus)]:ring invalid:[&:not(:placeholder-shown):not(:focus)]:ring-red-500"
                placeholder="someone@example.com"
                value={email}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setEmail(e.target.value)}
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$"
              />
              <p className="mt-2 hidden text-sm text-red-500 peer-[&:not(:placeholder-shown):not(:focus):invalid]:block">
                Please enter a valid email address
              </p>
            </div>
            <div className="w-full p-2" />
            <div className="w-full p-2">
              <p className="py-1 text-lg">Travel?</p>
              <select
                className="w-full rounded p-2 text-stone-800 outline-none"
                placeholder="Name"
                value={travel}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setTravel(e.target.value)}
              >
                <option value="No">No</option>
                <option value="No">Yes</option>
              </select>
            </div>

            <div className="w-full p-2">
              <p className="py-1 text-lg">Wage</p>
              <input
                type="number"
                className="w-full rounded p-2 text-stone-800 outline-none"
                placeholder="someone@example.com"
                value={wage}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setWage(e.target.value)}
              />
            </div>

            <div className="w-full p-2">
              <p className="py-1 text-lg">Burden</p>
              <input
                type="number"
                className="w-full rounded p-2 text-stone-800 outline-none"
                placeholder="someone@example.com"
                value={burden}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setBurden(e.target.value)}
              />
            </div>
            <div className="w-full p-2" />
            <div className="w-full p-2">
              <p className="py-1 text-lg">Rating</p>
              <input
                type="number"
                className="w-full rounded p-2 text-stone-800 outline-none"
                placeholder="someone@example.com"
                value={rating}
                disabled={isLoading || mutation.isLoading}
                onChange={(e) => setRating(e.target.value)}
              />
            </div>
            <div className="w-full p-2">
              <h1 className="text-lg font-semibold">Notes</h1>
              <textarea
                className="w-full rounded p-2 text-stone-800 outline-none"
                disabled={isLoading || mutation.isLoading}
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>

            <div className="w-full p-2">
              <button
                disabled={isLoading || mutation.isLoading}
                onClick={save}
                className="flex h-10 w-full items-center justify-center rounded bg-gradient-to-br from-amber-700 to-red-700 font-semibold text-white hover:from-amber-600 hover:to-red-600"
              >
                {mutation.isLoading ? <LoadingSpinner /> : (<><p>Save</p> <CloudArrowUpIcon className="ml-2 h-5 w-5" /> </>)}
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const helper = generateSSGHelper();

  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("slug is not a string");
  if (id.length <= 0) throw new Error("slug too short");

  await helper.crewMembers.getById.prefetch({ crewMemberId: id });

  const result = helper.dehydrate();

  return {
    props: {
      trpcState: result,
      id: id,
    },
    revalidate: 60,
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default SingleCrewMemberPage;
