import type { GetStaticPropsContext, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { LoadingPage } from "~/components/loading";
import { api } from "~/utils/api";

import Image from "next/image";

const ProfilePage: NextPage<{ email: string }> = ({ email }) => {
  const { data, isLoading } = api.profile.getUserByEmail.useQuery({
    email: email,
  });

  if (isLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;
  if (!data.email) return <div>Something went wrong</div>;

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="p-2 text-lg font-semibold">
          <div>{data.email}</div>
        </div>
        <div className=" flex h-32 flex-col items-start justify-between bg-slate-800 p-2">
          <Image
            src={data.profilePicture}
            alt={`${data.email}'s profile picture`}
            className="h-28 w-28 translate-y-16 rounded-full border-2 border-black"
            width={62}
            height={62}
          />
        </div>

        <div className="border-b border-slate-400 p-2 pt-20 pb-4 text-2xl font-semibold">
          <div>@{data.email}</div>
        </div>
      </PageLayout>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import superjson from "superjson";
import { prisma } from "~/server/db";
import { PageLayout } from "~/components/layout";

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("slug is not a string");

  if (slug.length <= 1) throw new Error("slug too short");

  const resultingEmail = slug.substring(1, slug.length);
  console.log("email: " + resultingEmail);

  await helpers.profile.getUserByEmail.prefetch({ email: resultingEmail });

  const result = helpers.dehydrate();

  console.log(result);

  return {
    props: {
      trpcState: result,
      email: resultingEmail,
    },
    revalidate: 1,
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
