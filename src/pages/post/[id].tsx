import type { GetStaticPropsContext, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { LoadingPage } from "~/components/loading";
import { api } from "~/utils/api";

import { PageLayout } from "~/components/layout";

// import Image from "next/image";
import { useRouter } from "next/router";

import { PostView } from "~/components/postview";
// import type { User } from "@clerk/nextjs/server";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

const SinglePostPage: NextPage<{ postId: string }> = ({ postId }) => {
  const router = useRouter();

  const { data, isLoading } = api.posts.getById.useQuery({
    id: postId,
  });

  if (isLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;
  if (!data.author) return <div>Something went wrong</div>;
  if (!data.post) return <div>Something went wrong</div>;

  return (
    <>
      <Head>
        <title>{`${data.post.content} - @${data.author.email || "unknown"}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="p-2 text-lg font-semibold">
          <div className="flex items-end gap-2">
            <button className="text-2xl font-bold" onClick={router.back}>
              &lt;{" "}
            </button>
            Post From {data?.author.email}
          </div>
        </div>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const helper = generateSSGHelper();

  const postId = context.params?.id;

  if (typeof postId !== "string") throw new Error("slug is not a string");
  if (postId.length <= 0) throw new Error("slug too short");

  await helper.profile.getUserByEmail.prefetch({ postId });

  const result = helper.dehydrate();

  return {
    props: {
      trpcState: result,
      postId: postId,
    },
    revalidate: 1,
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default SinglePostPage;
