import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

import { useCallback } from "react";
import ReactFlow, { ReactFlowProvider, useReactFlow } from "reactflow";
import "reactflow/dist/style.css";

// import './button.css';

import ResizableNodeSelected from "~/components/ResizableNodeSelected";
import { LoadingPage } from "~/components/loading";
import { api } from "~/utils/api";

const nodeTypes = {
  ResizableNodeSelected,
};

const edgeOptions = {
  animated: true,
  style: {
    stroke: "white",
  },
};

const initialNodes = [
  {
    id: "1",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 0 },
    width: 100,
    height: 50,
    data: { label: "Job 1", canResize: true },
  },
  {
    id: "2",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 1", canResize: true },
  },
  {
    id: "6",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 2", canResize: true },
  },
  // {
  //   id: "3",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 300, y: 100 },
  // },
  // {
  //   id: "4",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 500, y: 300 },
  // },
];
const initialEdges = [
  { id: "e1-2", source: "3", target: "4", type: "smoothstep" },
];

const connectionLineStyle = { stroke: "white" };

let nodeId = 0;

function Flow() {
  const { query } = useRouter();

  const blueprintId = query.blueprintid as string;

  const { data, isLoading, isError } = api.blueprints.getOneById.useQuery({
    blueprintId,
  });

  const reactFlowInstance = useReactFlow();

  console.log(reactFlowInstance.deleteElements);

  const onClick = useCallback(() => {
    const id = `${++nodeId}`;
    const newNode = {
      id,
      position: {
        x: Math.random() * 500,
        y: Math.random() * 500,
      },
      data: {
        label: `Node ${id}`,
      },
    };
    reactFlowInstance.addNodes(newNode);
  }, []);

  if (data == null || isLoading || isError) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>{`${data.name} (Blueprint) - War Manager`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute inset-0 top-0 z-20 flex h-14 w-full items-center justify-between bg-zinc-100 p-2 px-5 text-[#222] drop-shadow-md ">
        <Link href="/Home">Home</Link>
        <div className="text-center text-sm font-semibold md:text-lg">
          {data.name}
        </div>
        <Link href="#">Save</Link>
      </div>
      <div className="h-screen w-screen bg-zinc-400">
        <ReactFlow
          defaultNodes={initialNodes}
          defaultEdges={initialEdges}
          defaultEdgeOptions={edgeOptions}
          fitView
          nodeTypes={nodeTypes}
          connectionLineStyle={connectionLineStyle}
          snapToGrid={true}
          snapGrid={[10, 10]}
        />
        <button
          onClick={onClick}
          className="btn-add absolute left-10 top-10 z-20 rounded bg-zinc-500 p-2"
        >
          add node
        </button>
      </div>
    </>
  );
}

const BlueprintPage: NextPage = () => {
  return (
    <ReactFlowProvider>
      <Flow />
    </ReactFlowProvider>
  );
};

export default BlueprintPage;
