import type { NextPage } from "next";

import { api } from "~/utils/api";

import React, { useCallback } from "react";
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  BackgroundVariant,
} from "reactflow";

import type { Edge, Connection } from "@reactflow/core";

import ResizableNodeSelected from "~/components/ResizableNodeSelected";

import "reactflow/dist/style.css";
import { useRouter } from "next/router";
import Head from "next/head";
import { LoadingPage } from "~/components/loading";
import Link from "next/link";
import { init } from "next/dist/compiled/@vercel/og/satori";

const nodeTypes = {
  ResizableNodeSelected,
};

let initialNodes = [
  {
    id: "1",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 0 },
    width: 100,
    height: 50,
    data: { label: "Job 1", canResize: true },
  },
  {
    id: "2",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 1", canResize: true },
  },
  {
    id: "6",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 2", canResize: true },
  },
  // {
  //   id: "3",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 300, y: 100 },
  // },
  // {
  //   id: "4",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 500, y: 300 },
  // },
];
let initialEdges = [
  { id: "e1-2", source: "3", target: "4", type: "smoothstep" },
];

const GraphPage: NextPage = () => {
  const { query } = useRouter();

  const blueprintId = query.blueprintid as string;

  const { data, isLoading, isError } = api.blueprints.getOneById.useQuery({
    blueprintId,
  });

  const [nodes] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  //   const onSetNodes = useCallback(
  //     (changes: NodeChange[]) =>
  //       setNodes((nds) => applyNodeChanges(changes, nds)),
  //     [setNodes]
  //   );

  const proOptions = { hideAttribution: true };

  const dots = BackgroundVariant.Dots;

  if (isLoading)
    return (
      <div>
        <LoadingPage />
      </div>
    );
  if (isError) return <div>Something went wrong</div>;
  if (!data) return <div>Something went wrong</div>;

  if (!data.nodes) data.nodes = [];
  if (!data.edges) data.edges = [];

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  initialNodes = data.nodes;

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  initialEdges = data.edges;

  console.log(initialNodes);

  return (
    <>
      <Head>
        <title>{`\'${data.name}\' (Blueprint) - War Manager`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-[5vh] w-[100vw] items-center justify-between p-2 px-5">
        <Link href="/Home">Home</Link>
        <div className="text-center text-sm font-semibold md:text-lg">
          {data.name}
        </div>
        <div>Save</div>
      </div>
      <div className="bg-[#222]" style={{ width: "100vw", height: "95vh" }}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          // onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          snapToGrid={true}
          snapGrid={[20, 20]}
          fitView
          proOptions={proOptions}
          nodeTypes={nodeTypes}
        >
          <Controls />
          <MiniMap />
          <Background variant={dots} gap={20} size={1} />
        </ReactFlow>
      </div>
    </>
  );
};

export default GraphPage;
