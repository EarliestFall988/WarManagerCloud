import { SignedIn } from "@clerk/nextjs";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

import React, { ComponentClass, useCallback, useEffect, useState } from "react";
import ReactFlow, { ReactFlowProvider, useReactFlow } from "reactflow";
import "reactflow/dist/style.css";

// import './button.css';

import ResizableNodeSelected from "~/components/ResizableNodeSelected";
import {
  CrewList,
  ProjectsList,
} from "~/components/auxilaryBlueprintEditingComponents";
import { LoadingPage } from "~/components/loading";
import { api } from "~/utils/api";

const nodeTypes = {
  ResizableNodeSelected,
};

const edgeOptions = {
  animated: true,
  style: {
    stroke: "white",
  },
};

const initialNodes = [
  {
    id: "1",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 0 },
    width: 100,
    height: 50,
    data: { label: "Job 1", canResize: true },
  },
  {
    id: "2",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 1", canResize: true },
  },
  {
    id: "6",
    type: "ResizableNodeSelected",
    position: { x: 0, y: 100 },
    data: { label: "Emp 2", canResize: true },
  },
  // {
  //   id: "3",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 300, y: 100 },
  // },
  // {
  //   id: "4",
  //   type: "default",
  //   width: 500,
  //   height: 500,
  //   position: { x: 500, y: 300 },
  // },
];
const initialEdges = [
  { id: "e1-2", source: "3", target: "4", type: "smoothstep" },
];

const connectionLineStyle = { stroke: "white" };

let nodeId = initialNodes.length;

const Flow = function () {
  const [toggle, setToggle] = useState("");

  const { query } = useRouter();

  const blueprintId = query.blueprintid as string;

  const { data, isLoading, isError } = api.blueprints.getOneById.useQuery({
    blueprintId,
  });

  const reactFlowInstance = useReactFlow();

  // console.log(reactFlowInstance.deleteElements);

  const onClick = useCallback(
    (keyword: string) => {
      if (keyword == "Project") {
        if (toggle == "Project") {
          setToggle(" ");
        } else {
          setToggle("Project");
        }
      }

      if (keyword == "Employee") {
        if (toggle == "Employee") {
          setToggle(" ");
        } else {
          setToggle("Employee");
        }
      }

      console.log("keyword: " + keyword + " toggle: " + toggle);

      // const id = `${++nodeId}`;
      // const newNode = {
      //   id,
      //   position: {
      //     x: Math.random() * 500,
      //     y: Math.random() * 500,
      //   },
      //   data: {
      //     label: `Node ${id}`,
      //   },
      // };
      // reactFlowInstance.addNodes(newNode);
    },
    [setToggle, toggle] //make sure to add the reactFlowInstance if needed
  );

  if (data == null || isLoading || isError) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>{`${data.name} (Blueprint) - War Manager`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute inset-0 top-0 z-20 flex h-14 w-full items-center justify-between bg-zinc-700 p-2 px-5 text-gray-100 drop-shadow-md ">
        <Link
          className="text-md font-bold"
          href="/dashboard?context=Blueprints"
        >
          Back
        </Link>
        <div className="text-center text-sm font-semibold md:text-lg">
          {data.name}
        </div>
        <button>Save</button>
      </div>
      <SignedIn>
        <div className="h-screen w-screen bg-zinc-800">
          <ReactFlow
            defaultNodes={initialNodes}
            defaultEdges={initialEdges}
            defaultEdgeOptions={edgeOptions}
            fitView
            nodeTypes={nodeTypes}
            connectionLineStyle={connectionLineStyle}
            snapToGrid={true}
            snapGrid={[10, 10]}
          />
          <div className="absolute right-0 top-20 flex gap-4 rounded bg-zinc-700 p-1 drop-shadow-md transition-all duration-100">
            {toggle == "Employee" && <CrewList />}

            {toggle == "Project" && <ProjectsList />}
            <div className="flex flex-col gap-2">
              <button
                onClick={() => onClick("")}
                className="btn-add z-20 rounded bg-gradient-to-br from-amber-700 to-red-600 p-2 text-white"
              >
                Export Link
              </button>
              <button
                onClick={() => onClick("Project")}
                className="btn-add  z-20 rounded bg-zinc-500 p-2"
              >
               Projects
              </button>
              <button
                onClick={() => onClick("Employee")}
                className="btn-add  z-20 rounded bg-zinc-500 p-2"
              >
                Crew Members
              </button>
            </div>
          </div>
        </div>
      </SignedIn>
    </>
  );
};

const BlueprintPage: NextPage = () => {
  return (
    <ReactFlowProvider>
      <Flow />
    </ReactFlowProvider>
  );
};

export default BlueprintPage;
